//位运算是对补码进行的操作
package com.woniuxy.java.basic;

public class LearnBitOperation {
	public static void main(String[]args) {
		
		System.out.println(3>>>1);//0011  ---> 0001
		System.out.println(-3>>>1);/*原1000 0000 0000 0000 0000 0000 0000 0011
									补1111 1111 1111 1111 1111 1111 1111 1100
								右补  0111 1111 1111 1111 1111 1111 1111 1110
								
								原        0111 1111 1111 1111 1111 1111 1111 1110
		 							 正数的三种都是一样的呀！！！！
		 							 >>>表示无符号右移，高位用0补充*/
		System.out.println(-3>>1);/*1000 0000 0000 0000 0000 0000 0000 0011 原
									1111 1111 1111 1111 1111 1111 1111 1101 补
									1111 1111 1111 1111 1111 1111 1111 1110 右补
									  1111 1111 1111 1111 1111 1111 1111 1101 右反
									  1000 0000 0000 0000 0000 0000 0000 0010 右原
		 							对负数进行操作时，注意是对其补码	
		 							>>表示右移，符号位与原来一样，其他高位用0补充*/
		System.out.println("----------");
		int a = 4;
		System.out.println(a&=3);//0100 & 0011 -->0000
		System.out.println("----------");
		System.out.println(a&=4);
		System.out.println(4&4);
		System.out.println(a);
		System.out.println("----------");
		System.out.println(-4&-4);/*&按位与 1000...0100&1000...0100原--->
						反：1111....1011&1111....1011---->补：1111....1100&1111....1100--->
						1111....1100结果补--->
						1111....1011结果反--->1000.....0100结果原*/
		System.out.println((3 ^ 3)+"-----");
		System.out.println((3 ^ 4)+"-----");//0011^0100--->0111--->7
	}
}
