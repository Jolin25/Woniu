package com.woniu.tank.ui;

/**
 * 画布类
 */
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.Vector;

import javax.imageio.ImageIO;
import javax.swing.JPanel;

import com.woniu.tank.bullet.Bullet;
import com.woniu.tank.bullet.BulletBoom;
import com.woniu.tank.map.Npc;
import com.woniu.tank.map.Player;
import com.woniu.tank.map.TankMap;
import com.woniu.tank.util.ImageUtil;
import com.woniu.tank.util.Music;

//因为要不断的重新绘制地图，所以把该类做成线程，不断调用repaint方法
public class GamePanel extends JPanel implements Runnable {
	public static Integer[][] gameMap;// 当前地图
	public static Player player = null;//只有一个玩家
	public static int untilnowNumber = 0;// 单局累计产生坦克的数量
	int step = 0;// 用于设置坦克动的效果图
	// 生成敌方坦克被我放在了画图方法里，因为想要不断的生成。优化？
	public static Vector<Bullet> bullets = new Vector<Bullet>();// 子弹集合
	public static Vector<Npc> npcs = new Vector<Npc>();// npc集合
	public static Vector<BulletBoom> bulletBooms = new Vector<BulletBoom>();//子弹爆炸效果集合
	public static boolean gameOver = false;// 标志游戏是否结束

	/**
	 * 构造方法：进行默认设置
	 */
	public GamePanel() {

		new Music("music/BGM.wav").play();// 播放开始音乐
		/*
		 * 创建一个我方坦克实例，设置出生位置为老王左边两位,以左上角的坐标作为x,y
		 */
		// 注意xy坐标和二维数组的行列是相反的哈

		player = new Player((TankMap.first[0].length / 2 - 2), (TankMap.first.length - 1), 0);

		/*
		 * 键盘事件监听
		 */
		// 是当前画布成为事件的焦点，类似鼠标确定选项框的作用，用于确定对哪个画布进行操作
		this.setFocusable(true);
		// 重写键盘监听方法
		this.addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(KeyEvent e) {
				super.keyPressed(e);
				/*
				 * 当监听事件发生时，要执行的代码
				 */
				// e 保存了事件的相关信息
				player.move(e);// 我方坦克移动
			}
		});

		// 默认设置
		this.setBackground(Color.BLACK);// 设置背景颜色
		// 开启线程,在构造方法中构造，方便创建即开启
		new Thread(this).start();
	}

	public static void createNpc() {
		/*
		 * 创建敌方坦克实例(像素为28*28)
		 */
		int npcBirth[] = { 0, TankMap.first[0].length / 2, TankMap.first[0].length - 1 };
		int limitNumber = 3;// 瞬间允许最大敌方坦克数量
		int maxNumber = 6;// 单局游戏总共可生成的坦克数量
		// 随机生成坦克
		while (npcs.size() < limitNumber && untilnowNumber < maxNumber) {
			Npc npc = new Npc(npcBirth[(int) (Math.random() * npcBirth.length)], 0, 2);
			npcs.add(npc);
			untilnowNumber++;
		}
	}

	/**
	 * 绘制画布（利用了画笔g（Graphics图像）） JPanel对象创建时，会调用一次绘制方法（paintComponent）
	 */
	@Override
	protected void paintComponent(Graphics g) {
		// 注意，下面这个调用父类的绘制方法必须要保留
		super.paintComponent(g);
		// 把绘制地图的方法放在这里调用
		drawMap(g);
		drawPlayer(g);
		drawNpc(g);
		drawBullet(g);

	}

	/**
	 * 绘制地图
	 */
	public void drawMap(Graphics g) {
		gameMap = TankMap.randomMap;// 要绘制的地图数组
		// 利用画笔g来完成画布的绘制
		for (int i = 0; i < gameMap.length; i++) {
			for (int j = 0; j < gameMap[i].length; j++) {
				switch (gameMap[i][j].intValue()) {
				case 1:
					// 把源图片的某个区域画到画布的某个区域上
					g.drawImage(ImageUtil.mapImage, j * 32, i * 32, 32 * (j + 1), 32 * (i + 1), 0, 0, 32, 32, this);
					break;
				case 2:
					g.drawImage(ImageUtil.mapImage, j * 32, i * 32, 32 * (j + 1), 32 * (i + 1), 32, 0, 64, 32, this);
					break;
				case 3:
					g.drawImage(ImageUtil.mapImage, j * 32, i * 32, 32 * (j + 1), 32 * (i + 1), 64, 0, 96, 32, this);
					break;
				case 4:
					g.drawImage(ImageUtil.mapImage, j * 32, i * 32, 32 * (j + 1), 32 * (i + 1), 32 * (3 + step), 0,
							32 * (4 + step), 32, this);
					break;
				case 5:
					g.drawImage(ImageUtil.mapImage, j * 32, i * 32, 32 * (j + 1), 32 * (i + 1), 32 * (4 - step), 0,
							32 * (5 - step), 32, this);
					break;
				case 6:
					g.drawImage(ImageUtil.mapImage, j * 32, i * 32, 32 * (j + 1), 32 * (i + 1), 32 * 5, 0, 32 * 6, 32,
							this);
					break;
				default:
					break;
				}
			}
		}
	}

	/**
	 * 绘制我方坦克:因为会不断的调用repaint方法，故传入绘图的参数不能用固定的
	 * 
	 * @param g
	 */
	public void drawPlayer(Graphics g) {
		/*
		 * 32位像素移动
		 */
		g.drawImage(ImageUtil.playerImage, player.getX() * 32, player.getY() * 32, player.getX() * 32 + 32,
				player.getY() * 32 + 32, (0 + step) * 32, player.getDir() * 32, (0 + step) * 32 + 32,
				player.getDir() * 32 + 32, this);
		/*
		 * 4位像素移动：x y 坐标全部放大8倍
		 */

//		g.drawImage(ImageUtil.playerImage, player.getX() * 4, player.getY() * 4, player.getX() * 4 + 32,
//				player.getY() * 4 + 32, (0 + step) * 32, player.getDir() * 32, (0 + step) * 32 + 32,
//				player.getDir() * 32 + 32, this);

	}

	/**
	 * 绘制敌方坦克
	 */
	public void drawNpc(Graphics g) {
		createNpc();// 生成新的敌方坦克

		// 遍历集合
		for (int i = 0; i < GamePanel.npcs.size(); i++) {
			Npc npc = GamePanel.npcs.get(i);
			g.drawImage(ImageUtil.npcImage, npc.getX() * 32, npc.getY() * 32, npc.getX() * 32 + 32,
					npc.getY() * 32 + 32, step * 28, npc.getDir() * 28, (step + 1) * 28, npc.getDir() * 28 + 28, this);
			// 如果敌方坦克不存在了，则从集合中删除
			if (!npc.getIsAlive()) {
				npcs.remove(npc);
			}
		}
	}

	/**
	 * 绘制子弹
	 */
	public void drawBullet(Graphics g) {
		for (int i = 0; i < bullets.size(); i++) {
			Bullet bullet = bullets.get(i);
			g.drawImage(ImageUtil.bulletImage, bullet.getX() * 32, bullet.getY() * 32, bullet.getX() * 32 + 32,
					bullet.getY() * 32 + 32, 0, 0, 28, 28, this);
			// 如果子弹不存活了，则从集合中删除该元素
			if (!bullet.getIsAlive()) {
				bullets.remove(bullet);
			}

		}
	}

	/**
	 * 绘制子弹爆炸效果
	 */
	public void drawBulletBoom(Graphics g) {
		
	}

	/**
	 * run方法
	 */
	@Override
	public void run() {
		// 不断调用repaint方法进行该画布的绘制
		while (!gameOver) {
			// 每100毫秒刷新一次
			try {
				Thread.sleep(100);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			step++;
			if (step > 1) {// 当等于2的时候，就轮了一遍0和1了
				step = 0;
			}

			// 对该画布重新进行绘制
			this.repaint();
		}
	}
}
