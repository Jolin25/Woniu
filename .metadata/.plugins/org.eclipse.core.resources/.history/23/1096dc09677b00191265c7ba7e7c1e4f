package API介绍;

public class PersonTest {
	public static void main(String[] args) {
		PersonTest pt = new PersonTest();
		
		pt.show();
		pt.add(new Person("one",1,"female"));
	
		pt.show();
		pt.contains(new Person("two", 4, "male"));
		pt.show();
		pt.get(3);
		pt.show();
		System.out.println(pt.indexOf(p[2]));
		pt.show();
		pt.clear(p);
		
	}
	public void show() {
		for(int i=0;i<p.length;i++) {
			System.out.println(p[i].toString());
			
		}
		System.out.println();
	}
	// 定义一个Person数组
	static Person[] p = new Person[3];
	static {
		p[0] = new Person("one", 1, "female");
		p[1] = new Person("two", 2, "male");
		p[2] = new Person("three", 3, "female");
	}

	/*
	 * 定义一个方法add，用于添加Person对象到数组中，不能保存重复的对象
	 */
	public void add(Person newP) {
		boolean hasSame = false;// 默认不重复
		for (int i = 0; i < p.length; i++) {
			if (p[i].equals(newP)) {
				System.out.println("与已有对象重复");
				hasSame = true;
				break;
			}
		}
		// 如果不重复，则添加
		if (!hasSame) {
			boolean isFull = false;//默认不满
			for (int i = 0; i < p.length; i++) {
				// 如果数组不满，则直接添加
				if (p == null) {
					p[i] = newP;
					break;
				}
				
				if (i == p.length - 1) {
					isFull = true;
				}
			}
			// 如果数组满了，则动态扩容
			Person[] p1 = new Person[p.length + 1];
			p1[p.length] = newP;
			for (int j = 0; j < p.length; j++) {
				p1[j] = p[j];
			}
			p = p1;
		}
	}

	/*
	 * 定义一个方法contains(Person p).判断数组中是否包含了该对象(属性相等也算包含)
	 */
	public void contains(Person pp) {
		boolean isContains = false;// 默认不包含
		for (int i = 0; i < p.length; i++) {
			if (p[i].equals(pp)) {
				System.out.println("包含了" + pp.toString() + "对象");
				isContains = true;
				break;
			}
		}
		if (!isContains) {
			System.out.println("不包含" + pp.toString() + "对象");
		}
	}

	/*
	 * 定义一个方法indexOf(Person p).返回数组中该对象(或者属性相等)的下标。
	 */
	public int indexOf(Person pp) {
		for (int i = 0; i < p.length; i++) {
			if (p[i].equals(pp)) {
				
				return i;
			}
		}
		return -1;
	}

	/*
	 * 定义一个方法get (int index).返回下标为index的对象
	 */
	public Person get(int index) {
		if (index < 0 || index > p.length - 1) {
			System.out.println("输入错误");
			return null;
		} else {
			return p[index];
		}

	}
	/*
	 * 定义一个方法clear().用于清理掉数组中所有数据
	 */
	public void clear(Person[] p ) {
		for(int i = 0;i<p.length;i++) {
			p[i]=null;
		}
	}
}
